import logging
import random
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–ª–∞–Ω–æ–≤
users = {}
clans = {}
boss_alive = True
last_boss_kill = 0

# –ö–ª–∞—Å—Å—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
CLASSES = {
    "–†—ã—Ü–∞—Ä—å": {"–°–∏–ª–∞": 5, "–õ–æ–≤–∫–æ—Å—Ç—å": 2, "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç": 1},
    "–†–µ–π–Ω–¥–∂–µ—Ä": {"–°–∏–ª–∞": 2, "–õ–æ–≤–∫–æ—Å—Ç—å": 5, "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç": 2},
    "–ê—Å—Å–∞—Å–∏–Ω": {"–°–∏–ª–∞": 5, "–õ–æ–≤–∫–æ—Å—Ç—å": 4, "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç": 1},
    "–ú–∞–≥": {"–°–∏–ª–∞": 1, "–õ–æ–≤–∫–æ—Å—Ç—å": 2, "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç": 5},
}

# –ú–æ–Ω—Å—Ç—Ä—ã –∏ –ª—É—Ç
MONSTERS = {
    "–ì—Ä–µ–º–ª–∏–Ω": {"hp": 30, "loot": ["–ó—É–± –≥—Ä–µ–º–ª–∏–Ω–∞", "–ö—É—Å–æ–∫ –∫–æ–∂–∏"]},
    "–•–æ–±–≥—Ä–µ–º–ª–∏–Ω": {"hp": 50, "loot": ["–ö–æ–≥–æ—Ç—å —Ö–æ–±–≥—Ä–µ–º–ª–∏–Ω–∞", "–ú–∞–ª—ã–π –∑–µ–ª—ë–Ω—ã–π –∫–∞–º–µ–Ω—å"]},
    "–ß–∞–±–æ–Ω (–±–æ—Å—Å)": {"hp": 200, "loot": ["–ú–µ—á –ß–∞–±–æ–Ω–∞", "–ë–æ–ª—å—à–æ–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫–∞–º–µ–Ω—å"]}
}

# –ú–∞–≥–∞–∑–∏–Ω
SHOP = {
    "–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è": 10,
    "–ú–µ—á –Ω–æ–≤–∏—á–∫–∞": 20,
    "–©–∏—Ç –æ—Ö–æ—Ç–Ω–∏–∫–∞": 15
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
class_kb = ReplyKeyboardMarkup(resize_keyboard=True)
for c in CLASSES:
    class_kb.add(KeyboardButton(c))

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–õ–µ—Å –≥—Ä–µ–º–ª–∏–Ω–æ–≤"))
main_kb.add(KeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω"), KeyboardButton("–†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞–Ω–æ–≤"))
main_kb.add(KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton("–°–∫—É–ø—â–∏–∫"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id in users:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_kb)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å:", reply_markup=class_kb)

@dp.message_handler(lambda message: message.text in CLASSES)
async def choose_class(message: types.Message):
    user_id = message.from_user.id
    users[user_id] = {
        "–∏–º—è": message.from_user.first_name,
        "–∫–ª–∞—Å—Å": message.text,
        "—É—Ä–æ–≤–µ–Ω—å": 1,
        "–æ–ø—ã—Ç": 0,
        "—Ö–ø": 100,
        "—Å—Ç–∞—Ç—ã": CLASSES[message.text].copy(),
        "–∫–ª–∞–Ω": None,
        "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": [],
        "–∑–æ–ª–æ—Ç–æ": 50
    }
    await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å {message.text}!", reply_markup=main_kb)

@dp.message_handler(lambda message: message.text == "–ú–∞–≥–∞–∑–∏–Ω")
async def shop(message: types.Message):
    shop_items = "\n".join([f"{item} - {price} –∑–æ–ª–æ—Ç–∞" for item, price in SHOP.items()])
    await message.answer(f"üõí **–ú–∞–≥–∞–∑–∏–Ω:**\n{shop_items}\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –µ–≥–æ.")

@dp.message_handler(lambda message: message.text in SHOP)
async def buy_item(message: types.Message):
    user_id = message.from_user.id
    item = message.text
    price = SHOP[item]
    if users[user_id]["–∑–æ–ª–æ—Ç–æ"] >= price:
        users[user_id]["–∑–æ–ª–æ—Ç–æ"] -= price
        users[user_id]["–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"].append(item)
        await message.answer(f"–í—ã –∫—É–ø–∏–ª–∏ {item}! üèÜ")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! ‚ùå")

@dp.message_handler(lambda message: message.text == "–°–∫—É–ø—â–∏–∫")
async def sell_items(message: types.Message):
    user_id = message.from_user.id
    inventory = users[user_id]["–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"]
    if not inventory:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏! ‚ùå")
        return
    
    inventory_items = "\n".join([f"{item}" for item in inventory])
    await message.answer(f"üõí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:**\n{inventory_items}\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –µ–≥–æ.")

@dp.message_handler()
async def sell_specific_item(message: types.Message):
    user_id = message.from_user.id
    item = message.text
    if item in users[user_id]["–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"]:
        sell_price = random.randint(5, 15)
        users[user_id]["–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"].remove(item)
        users[user_id]["–∑–æ–ª–æ—Ç–æ"] += sell_price
await message.answer(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {item} –∑–∞ {sell_price} –∑–æ–ª–æ—Ç–∞! üí∞")
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ! ‚ùå")

if name == '__main__':
    executor.start_polling(dp, skip_updates=True)
